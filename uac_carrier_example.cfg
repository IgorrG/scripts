#!KAMAILIO
#############################################
# Kamailio (OpenSER) SIP Server v5.7
#
#-- Need help?
#-- Free/Official: 
#		- Documentation: <https://www.kamailio.org/w/documentation/>
#		- Wiki: <https://www.kamailio.org/wiki/>
# 		- Modules: <https://www.kamailio.org/docs/modules/stable/>
#		- Mailing Lists: <https://www.kamailio.org/w/mailing-lists/>
#-- Commercial:
#		- LOD
#			- <https://lod.com>
#			- Fred Posner <fred@lod.com> tel: +1 (352) 664-3733
#############################################

#############################################
#-- Start Config
#############################################

#-- Include Local Config for ips, etc.
include_file "kamailio-local.cfg"

#--Code Blocks
#!define WITH_ANTIFLOOD
#!define WITH_APIBAN
#!define WITH_RTPENGINE
#!define WITH_DIALOG
#!define FLT_NATS 5
#!define FLB_NATB 6
#!define WITH_SIPDUMP

#-- Define Substitutions
#!substdef "/PBXPORT/5080/"

#-- Global parameters.
debug=2
memdbg=5
memlog=5
pv_buffer_size=65536
pv_cache_limit=65536
log_facility=LOG_LOCAL0
log_prefix="{$mt $proto $hdr(CSeq) $ci} "
children=8
disable_tcp=no
tcp_connection_lifetime=3605
tcp_accept_no_cl=yes
dns=no
dns_cache_init=off
dns_srv_lb=no
dns_try_naptr=no
maxbuffer=65536
max_while_loops=250
rev_dns=no
use_dns_cache=no
auto_aliases=no
mhomed=0
force_rport=yes
user_agent_header="User-Agent: Kamailio 5.7"
server_header="Server: Kamailio 5.7"
xavp_via_params = "via"

listen=udp:PRIVATEIP:5060 advertise PUBLICIP:5060 name "publicsock"
listen=tcp:PRIVATEIP:5060 advertise PUBLICIP:5060 name "tcpsock"
listen=udp:PRIVATEIP:PBXPORT name "pbxsock"
listen=tcp:127.0.0.1:80 name "httpsock"
alias=PUBLICIP:5060
alias=PRIVATEIP:PBXPORT
alias=DOMAINNAME:5060
port=5060

#-- Load modules.
loadmodule "jsonrpcs.so"
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "rtimer.so"
loadmodule "http_client.so"
loadmodule "jansson.so"
loadmodule "dmq.so"
loadmodule "htable.so"
loadmodule "textopsx.so"
loadmodule "nathelper.so"
loadmodule "path.so"
loadmodule "db_mysql.so"
loadmodule "uac.so"
loadmodule "sdpops.so"
loadmodule "ipops.so"
loadmodule "uuid.so"
loadmodule "cfgutils.so"
loadmodule "xhttp.so"
loadmodule "tcpops.so"
loadmodule "evrexec.so"
loadmodule "sqlops.so"
loadmodule "cfg_rpc.so"

#!ifdef WITH_ANTIFLOOD
loadmodule "pike.so"
#!endif

#!ifdef WITH_RTPENGINE
loadmodule "rtpengine.so"
#!endif

#!ifdef WITH_SIPDUMP
loadmodule "sipdump.so"
loadmodule "exec.so"
#!endif

#-- Module parameters.
modparam("jsonrpcs", "pretty_format", 1)
modparam("jsonrpcs", "transport", 1)
modparam("ctl", "binrpc", "unix:/var/run/kamailio/kamailio_ctl")
modparam("ctl", "binrpc", "tcp:localhost:2046")
modparam("evrexec", "exec", "name=evrexec:uac;wait=500;workers=1;")
modparam("htable", "htable", "ipban=>size=9;autoexpire=3600;")
modparam("htable", "htable", "carrier=>size=8;")
modparam("path", "enable_r2", 1)
modparam("rr", "enable_full_lr", 1)
modparam("rr", "append_fromtag", 1)
modparam("rr", "ignore_sips", 1)
modparam("rr", "enable_double_rr", 2)
modparam("rtimer", "timer", "name=tst;interval=60;mode=1;")
modparam("rtimer", "exec", "timer=tst;route=CPS_STATS")
modparam("tcpops", "closed_event", 2)
modparam("tm", "noisy_ctimer", 1)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "auto_inv_100", 1)
modparam("tm", "cancel_b_method", 1)
modparam("tm", "failure_reply_mode", 3)
modparam("tm", "fr_timer", 4000) #-- default is 30s or 30000
modparam("tm", "fr_inv_timer", 75000)
modparam("uac", "reg_db_url", "DBURL")
modparam("uac", "reg_contact_addr", "PUBLICIP:5060")
modparam("uac", "reg_retry_interval", 60)
modparam("uac","auth_username_avp","$avp(auser)")
modparam("uac","auth_password_avp","$avp(apass)")
modparam("uac","auth_realm_avp","$avp(arealm)")
modparam("sqlops","sqlcon","uac=>DBURL")
modparam("xlog", "prefix", "")

#!ifdef WITH_ANTIFLOOD
modparam("pike", "sampling_time_unit", 2)
modparam("pike", "reqs_density_per_unit", 256)
modparam("pike", "remove_latency", 4)
#!endif

#!ifdef WITH_APIBAN
modparam("rtimer", "timer", "name=apiban;interval=300;mode=1;")
modparam("rtimer", "exec", "timer=apiban;route=APIBAN")
modparam("htable", "htable", "apiban=>size=14;autoexpire=604800;")
modparam("htable", "htable", "apibanctl=>size=1;initval=100;")
#!endif

#!ifdef WITH_RTPENGINE
modparam("rtpengine", "rtpengine_sock", "RTPENGINEADDR")
modparam("rtpengine", "rtpengine_disable_tout", 15)
modparam("rtpengine", "rtpengine_tout_ms", 2000)
modparam("rtpengine", "rtpengine_retr", 2)
modparam("rtpengine", "mos_average_pv", "$avp(mos_average)")
modparam("rtpengine", "mos_average_packetloss_pv", "$avp(mos_average_packetloss)")
modparam("rtpengine", "mos_average_jitter_pv", "$avp(mos_average_jitter)")
#!endif

#!ifdef WITH_SIPDUMP
modparam("sipdump", "mode", 4)
modparam("rtimer", "timer", "name=tjobs;interval=900;mode=1;")
modparam("rtimer", "exec", "timer=tjobs;route=TCLEAN")
#!endif

#-- Initial request route.
route {
	route(REQINIT);

	if (is_method("CANCEL")) {
#!ifdef WITH_RTPENGINE
		rtpengine_manage();
#!endif
		handle_ruri_alias();

		if (!t_relay_cancel()) {
			xlog("L_INFO", "[R-MAIN] No matching transaction or other error on CANCEL\n");
			sl_send_reply("500", "Internal Server Error M1");
		}

		exit;
	}

	if (!is_method("ACK")) {
		if (t_precheck_trans()) {
			t_check_trans();
			exit;
		}

		t_check_trans();
	}

	route(WITHINDLG);

	#-- original call handling
	remove_hf("Route");
	if (is_method("INVITE|NOTIFY")) {
		record_route();
	}

	if ($Rn == "pbxsock") {
		#-- option: further limit via IP, dispatcher, etc.
		# xlog("L_INFO","[R-MAIN] $fd ($si) not authorized \n");
		# sl_send_reply("403", "Forbidden M2");
		# exit;

		route(FROMPBX);
	} else {
		route(TOPBX);
	}

	xlog("L_INFO","[R-MAIN] $fd ($si) unknown action \n");
	sl_send_reply("403", "Forbidden M4");
	exit;
}

route[FROMPBX] {
	if (!is_present_hf("Carrier")) {
		sl_send_reply("404", "No destination FPBX01");
		exit;
	} else {
		xlog("L_INFO","[R-FROMPBX] Carrier header of $hdr(Carrier) ");
		if (uac_reg_status("$hdr(Carrier)") > 0) {
			$ru = $_s(sip:$rU@$sht(carrier=>$hdr(Carrier)));
			$avp(carrier) = $hdr(Carrier);
			$fsn = "publicsock";
			t_on_failure("TRUNKAUTH");
			route(RELAY);
		}
	}

	#-- temp 404 until carrier
	sl_send_reply("404", "No destination FPBX02");
	exit;
}

route[TOPBX] {
	#-- send to PBX
	$avp(proto) = "udp";
	$fsn = "pbxsock";

    # logic to determine what PBX to sent to goes here....
    $ru = "sip:whatever@whatever";

	route(RELAY);
	exit;
}

route[REQINIT] {
	if ($sht(ipban=>$si)!=$null) {
		xdbg("request from blocked IP - $rm from $fu (IP:$si:$sp)\n");
		exit;
	}

#!ifdef WITH_APIBAN
	if ($sht(apiban=>$si)!=$null) {
		route(BLOCKIP);
		xdbg("request from apiban.org blocked IP - $rm from $fu (IP:$si:$sp)\n");
		exit;
	}
#!endif

#!ifdef WITH_ANTIFLOOD
	if (src_ip!=myself) {
		if (!pike_check_req()) {
			xlog("L_ALERT","ALERT: pike blocking $rm from $fu (IP:$si:$sp)\n");
			$sht(ipban=>$si) = 1;
			exit;
		}
	}
#!endif

	if ($ua =~ "friendly-scanner|sipcli|VaxSIPUserAgent") {
		xlog("L_INFO","[R-REQINIT] script kiddies from IP:$si:$sp - dropping and blocking\n");
		route(BLOCKIP);
		exit;
	}

	if ($au =~ "(\=)|(\-\-)|(')|(\#)|(\%27)|(\%24)" and $au != $null) {
		xlog("L_INFO","[R-REQINIT] sql injection from IP:$si:$sp - dropping\n");
		route(BLOCKIP);
		exit;
	}

	if (!mf_process_maxfwd_header("10")) {
		xlog("L_INFO","[R-REQINIT] too many hops\n");
		sl_send_reply("483","R1 Too Many Hops");
		exit;
	}

	if (is_method("OPTIONS")){
		if ($Rn == "pbxsock") {
			sl_send_reply("200","OK");
			exit;
		} else {
			# sl_send_reply("200","OK");
			exit;
		}
	}

	if (is_method("SUBSCRIBE|PUBLISH|REGISTER")) {
		xlog("L_INFO","[R-REQINIT] dropping $rm \n");
		exit;
	}

	if (!sanity_check("17895", "7")) {
		xlog("L_INFO","[R-REQINIT] Malformed SIP message from $si:$sp\n");
		exit;
	}
}

route[WITHINDLG] {
	if (!has_totag()) return;

	if (loose_route()) {
		if (is_method("INVITE|NOTIFY|PRACK|UPDATE")) {
			record_route();
		}

		route(RELAY);
		exit;
	} else {
		if (is_method("ACK")) {
			if ( t_check_trans() ) {
				route(RELAY);
				exit;
			} else {
				# ACK without matching transaction ... ignore and discard
				exit;
			}
		}
	}

	sl_send_reply("404","Not here WD1");
	exit;
}

route[BLOCKIP] {
	if (src_ip!=myself) {
		xlog("L_INFO","[R-BLOCKIP] blocking $rm from $fu (IP:$si:$sp)\n");
		$sht(ipban=>$si) = 1;
        #--
        #-- the next two lines blocks in iptables via IPTABLES-API 
        #-- https://github.com/palner/iptables-api
        #--
		$var(apiget) = "http://localhost:8082/blockip/" + $si;
		http_client_query("$var(apiget)", "$var(block)");
		xlog("L_INFO","[R-BLOCKIP] edgeapi: $var(block) \n");
	} else {
		xlog("L_INFO","[R-BLOCKIP] NOT BLOCKING $rm from $fu (IP:$si:$sp)\n");
	}

	return;
}

route[RELAY] {
	if (is_method("INVITE|BYE|SUBSCRIBE|UPDATE")) {
		if (!t_is_set("branch_route")) t_on_branch("MANAGE_BRANCH");
	}

	if (is_method("INVITE|SUBSCRIBE|UPDATE|REGISTER")) {
		if (!t_is_set("onreply_route")) t_on_reply("MANAGE_REPLY");
	}

	if (is_method("INVITE")) {
		if (!t_is_set("failure_route")) t_on_failure("MANAGE_FAILURE");
	}

	if ($avp(proto)=="tcp") {
		if (!t_relay_to_tcp()) {
			sl_reply_error();
		}
	} else {
		if (!t_relay()) {
			sl_reply_error();
		}
	}

	exit;
}

route[LOADAPIBAN] {
	route(APIBAN);
	if ($var(count) < 249) return;
	
	route(LOADAPIBAN);
}

route[APIBAN] {
#!ifdef WITH_APIBAN
	if (strempty($sel(cfg_get.apiban.key))) {
		xlog("[R-APIBAN]: APIBAN routing enabled but apiban.key not defined\n");
		$var(count) = 0;
		return;
	}

	$var(count) = 0;
	$var(apiget) = "https://apiban.org/api/" + $sel(cfg_get.apiban.key) + "/banned/" + $sht(apibanctl=>ID);
	xdbg("[R-APIBAN] request update ID: $sht(apibanctl=>ID)\n");

	http_client_query("$var(apiget)", "$var(banned)");
	if ($rc!=200) {
		xlog("L_INFO","[R-APIBAN] $var(banned)\n");
		return;
	}

	jansson_array_size("ipaddress", $var(banned), "$var(size)");
	while($var(count) < $var(size)) {
		jansson_get("ipaddress[$var(count)]", $var(banned), "$var(v)");
		$sht(apiban=>$var(v)) = 1;
		$var(count) = $var(count) + 1;
	}
	jansson_get("ID", $var(banned), "$var(w)");
	xdbg("[R-APIBAN] Blocked $var(count) addresses. New ID: $var(w)\n");
	$sht(apibanctl=>ID) = $var(w);
#!endif
	return;
}

route[RTPMANAGE] {
#!ifdef WITH_RTPENGINE
	if (is_method("NOTIFY|PUBLISH|REGISTER|SUBSCRIBE|MESSAGE")) {
		return;
	}

	if (strempty($avp(proto))) {
		xdbg( "[R-RTPMANAGE] avp(proto) empty. using udp. nh(P) $nh(P)\n");
		$avp(proto) = "udp";
	}

	xdbg("[R-RTPMANAGE] proto: $avp(proto)\n");

	#-- build rtpmanage options
	$xavp(r=>$T_branch_idx) = "replace-origin replace-session-connection ICE=remove";

	if ($Rn == "pbxsock") {
		$xavp(r=>$T_branch_idx) = $xavp(r=>$T_branch_idx) + " direction=internal direction=external";
	} else {
		if (nat_uac_test("8")) {
			$xavp(r=>$T_branch_idx) = $xavp(r=>$T_branch_idx) + " SIP-source-address";
		}
		
		$xavp(r=>$T_branch_idx) = $xavp(r=>$T_branch_idx) + " direction=external direction=internal";
	}

	xdbg( "[R-RTPMANAGE] branch_id:$T_branch_idx ruri: $ru, status:$rs, rtpengine_manage: $xavp(r=>$T_branch_idx)\n");
	if (has_totag()) {
		if (is_method("INVITE|UPDATE|ACK") || is_method("BYE")) {
			rtpengine_manage("$xavp(r=>$T_branch_idx)");
		}

		t_on_reply("MANAGE_REPLY");
	} else {
		if(is_method("INVITE") && has_body("application/sdp")){
			rtpengine_manage("$xavp(r=>$T_branch_idx)");
		}
	}
#!endif

	return;
}

# Manage outgoing branches
branch_route[MANAGE_BRANCH] {
	xdbg("new branch [$T_branch_idx] to $ru\n");
	route(RTPMANAGE);
}

# Manage incoming replies
onreply_route[MANAGE_REPLY] {
	if (!t_check_trans()) {
		drop;
	}

	route(RTPMANAGE);
}

failure_route[TRUNKAUTH] {
    if (t_is_canceled()) {
        exit;
    }

    if(t_check_status("401|407")) {
        $avp(auser) = $_s($sht(carrier=>$avp(carrier)::un));
        $avp(apass) = $_s($sht(carrier=>$avp(carrier)::pw));
		xlog("L_INFO","[R-TRUNKAUTH] remote authentication for $avp(auser) ");
        if (uac_auth()) {
            t_relay();
        }
    }
}

# Manage failure routing cases
failure_route[MANAGE_FAILURE] {
	route(RTPMANAGE);
	if (t_is_canceled()) exit;
}

event_route[htable:mod-init] {
	#-- pre load apiban
	xlog("L_INFO","[R-htable:mod-init] load apiban");
	route(LOADAPIBAN);
	xlog("L_INFO","[R-htable:mod-init] pre-load complete");

	xlog("L_INFO","[R-htable:mod-init] flush apibanlocal");
    #-- get IPTABLES-API: https://github.com/palner/iptables-api
	http_client_query("http://localhost:8082/flushchain", "$var(apinfo)");
}

#-- run when ipban htable value expires
event_route[htable:expired:ipban] {
	xlog("L_INFO","[htable:expired:ipban] record expired $shtrecord(key) => $shtrecord(value)\n");
    #-- get IPTABLES-API: https://github.com/palner/iptables-api
	http_client_query("http://localhost:8082/removeip/$shtrecord(key)", "$var(apinfo)");
}

route[CPS_STATS] {
    #-- add whatever stats you want, such as cps, calls, etc.
	jansson_set("string", "cancels", "$stat(rcv_requests_cancel)", "$var(statsjson)");
	jansson_set("string", "4xxt", " $stat(4xx_transactions)", "$var(statsjson)");
	jansson_set("string", "5xxt", "$stat(5xx_transactions)", "$var(statsjson)");
	xlog("L_NOTICE","[R-CPS_STATS] $var(statsjson)\n");
}

event_route[xhttp:request] {
	tcp_set_connection_lifetime("30");
	if ($hu =~ "^/RPC") {
		jsonrpc_dispatch();
		exit;
	} else {
		xhttp_reply("200", "OK", "application/json", "[{\"error\":\"Wrong URL $hu\"}]\n");
		exit;
	}

	return;
}

event_route[tcp:closed] {
	xlog("L_INFO","[tcp:closed] connection $conid was closed");
}

event_route[uac:reply] {
	xlog("L_INFO","[UAC:REPLY] $tU received reply code is: $uac_req(evcode)\n");
}

event_route[tm:local-request] {
	xlog("L_INFO", "[tm:local-request] Routing locally generated $rm to $ru \n");
}

event_route[evrexec:uac] {
	xlog("L_INFO","[evrexec:uac] adding carriers to htable");
	if (sql_xquery("uac", "select l_uuid, auth_username, auth_password, r_domain from uacreg", "ra") == 1) {
		while($xavp(ra) != $null) {
			xlog("L_INFO","[evrexec:uac] [l_uuid] = [$xavp(ra=>l_uuid), $xavp(ra=>r_domain)]\n");
			$sht(carrier=>$xavp(ra=>l_uuid)) = $xavp(ra=>r_domain);
			$sht(carrier=>$xavp(ra=>l_uuid)::un) =  $xavp(ra=>auth_username);
			$sht(carrier=>$xavp(ra=>l_uuid)::pw) =  $xavp(ra=>auth_password);
			pv_unset("$xavp(ra)");
		}

		sql_result_free("ra");
	} else {
		xlog("L_INFO","[evrexec:uac] no carriers found");
		return;
	}

	return;
}

#!ifdef WITH_SIPDUMP
route[TCLEAN] {
    exec_cmd("find /tmp -type f -name kamailio-sipdump-* -mtime +1 -delete &");
}
#!endif
